{"version":3,"file":"Client.Core.js","sourceRoot":"","sources":["Client.Core.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAO,KAAK,MAAM,MAAM,iCAAiC,CAAA;AACzD,OAAO,EAAC,OAAO,EAAC,MAAM,iCAAiC,CAAC;AAExD;IAAA;IAgCA,CAAC;IA9BU,4CAAa,GAApB;QACI,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAA;QAC3C,QAAQ,CAAC,MAAM,EAAE,CAAC;IACtB,CAAC;IAEY,kDAAmB,GAAhC,UAAiC,eAAoC;;;;;;wBACjE,OAAO,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAA;wBACtD,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;wBAC5B,WAAM,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,EAAA;;wBAArC,SAAqC,CAAC;wBAEtC,IAAG,UAAU,CAAC,iBAAiB,IAAI,SAAS,EAC5C;4BACQ,gBAAgB,GAAY,UAAU,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;4BAClG,IAAG,CAAC,gBAAgB,EACpB;gCACI,OAAO,CAAC,KAAK,EAAE,CAAC;6BACnB;4BACD,WAAO,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAC;yBAC5C;6BAED;4BACI,OAAO,CAAC,KAAK,EAAE,CAAC;yBACnB;wBACD,WAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAC;;;;KACjC;IAEM,+CAAgB,GAAvB,UAAwB,UAAoB;QACxC,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;QAC3C,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC5B,CAAC;IACL,2BAAC;AAAD,CAAC,AAhCD,IAgCC;;AAGD,UAAU,CAAC,gBAAgB,GAAG,IAAI,oBAAoB,EAAE,CAAC;AACzD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;AAE3C;IAaI;IAEA,CAAC;IAVD,sBAAI,gDAAe;aAAnB;YACI,IAAG,IAAI,CAAC,cAAc,IAAI,SAAS,EACnC;gBACI,OAAO,IAAI,CAAC;aACf;YACD,OAAO,KAAK,CAAA;QAChB,CAAC;;;OAAA;IAMD,iDAAmB,GAAnB,UAAoB,eAAoC;QAEpD,IAAG,IAAI,CAAC,cAAc,IAAI,SAAS,EACnC;YACI,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC;SACzC;QAED,IAAG,IAAI,CAAC,cAAc,IAAI,SAAS,EACnC;YACI,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YACtC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACjC,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAEY,8CAAgB,GAA7B;;;;;;6BAGO,IAAI,CAAC,eAAe,EAApB,cAAoB;wBAGb,KAAA,CAAA,KAAA,OAAO,CAAA,CAAC,iBAAiB,CAAA;wBAAC,WAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,EAAA;;wBADhG,YAAY,GACV,cAA0B,SAAoE,EAAC;wBACrG,WAAO,YAAY,EAAC;;;;;KAK3B;IACL,0BAAC;AAAD,CAAC,AA9CD,IA8CC","sourcesContent":["/// <reference types=\"@microsoft/Blazor/Microsoft.JSInterop\" />\r\n\r\nimport * as OriWeb from './Client.ImportExportcontroller'\r\nimport {Helpers} from \"./Client.ImportExportcontroller\";\r\n\r\nexport class AvailableClientCalls\r\n{\r\n    public ReloadBrowser() {\r\n        console.log(\"Webpack change, reloading...\")\r\n        location.reload();\r\n    }\r\n    \r\n    public async InjectIntoJSSession(myOriWebSession: DotNet.DotNetObject): Promise<Boolean>{\r\n        console.log(\"DotNetInterop Inject called from server\")\r\n        console.log(myOriWebSession)\r\n        await OriWeb.Helpers.WaitForSession();\r\n    \r\n        if(globalThis.CurrentOriSession != undefined)\r\n        {\r\n            let injectionResults: Boolean = globalThis.CurrentOriSession.InjectDotNetInterop(myOriWebSession);\r\n            if(!injectionResults)\r\n            {\r\n                console.error();\r\n            }\r\n            return Promise.resolve(injectionResults);\r\n        }\r\n        else\r\n        {\r\n            console.error();\r\n        }\r\n        return Promise.resolve(false);\r\n    }\r\n\r\n    public RecieveComponent(components: object[]) {\r\n        console.log(\"recieved list of components\");\r\n        console.log(components);\r\n    }\r\n}\r\n\r\n// JS Callable Functions\r\nglobalThis.OriJSClientCalls = new AvailableClientCalls();\r\nObject.freeze(globalThis.OriJSClientCalls);\r\n\r\nexport class OriWebClientSession\r\n{\r\n    private _dotNetInterop: DotNet.DotNetObject;\r\n    public NewOriComponent: any;\r\n    \r\n    get CheckConnection(): boolean {\r\n        if(this._dotNetInterop != undefined)\r\n        {\r\n            return true;\r\n        }\r\n        return false\r\n    }\r\n    \r\n    constructor()\r\n    {\r\n    }\r\n\r\n    InjectDotNetInterop(incomingInterop: DotNet.DotNetObject): Boolean\r\n    {\r\n        if(this._dotNetInterop == undefined)\r\n        {\r\n            this._dotNetInterop = incomingInterop;\r\n        }\r\n\r\n        if(this._dotNetInterop != undefined)\r\n        {\r\n            console.log(\"DotNetInterop Injected\");\r\n            console.log(this._dotNetInterop);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    public async NewBuildingBlock(): \r\n    Promise<any>    \r\n    {\r\n        if(this.CheckConnection)\r\n        {\r\n            let newComponent: any\r\n                = Helpers.BlazorIDToElement(await this._dotNetInterop.invokeMethodAsync(\"BuildNewBuildingBlock\")); \r\n            return newComponent;\r\n        }\r\n        else\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}