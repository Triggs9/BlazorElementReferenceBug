!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.OriWeb=n():e.OriWeb=n()}(window,(function(){return function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="~/js/",t(t.s=0)}([function(e,n,t){"use strict";t.r(n);var r={};t.r(r),t.d(r,"Sleep",(function(){return a})),t.d(r,"WaitForSession",(function(){return s})),t.d(r,"WaitForConnection",(function(){return f})),t.d(r,"InvalidPropertyException",(function(){return p})),t.d(r,"LineInfo",(function(){return d})),t.d(r,"BlazorIDToElement",(function(){return b}));var o={};t.r(o),t.d(o,"AvailableClientCalls",(function(){return v})),t.d(o,"OriWebClientSession",(function(){return g}));var i,l=(i=function(e,n){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(e,n)},function(e,n){function t(){this.constructor=e}i(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),u=function(e,n,t,r){return new(t||(t=Promise))((function(o,i){function l(e){try{c(r.next(e))}catch(e){i(e)}}function u(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(l,u)}c((r=r.apply(e,n||[])).next())}))},c=function(e,n){var t,r,o,i,l={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;l;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return l.label++,{value:i[1],done:!1};case 5:l.label++,r=i[1],i=[0];continue;case 7:i=l.ops.pop(),l.trys.pop();continue;default:if(!(o=(o=l.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){l=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){l.label=i[1];break}if(6===i[0]&&l.label<o[1]){l.label=o[1],o=i;break}if(o&&l.label<o[2]){l.label=o[2],l.ops.push(i);break}o[2]&&l.ops.pop(),l.trys.pop();continue}i=n.call(e,l)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};function a(e){return new Promise((function(n){return setTimeout(n,e)}))}function s(){return u(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return console.log("Waiting for OriClientSession to be established..."),[4,a(500)];case 1:e.sent(),e.label=2;case 2:if(null==globalThis.CurrentOriSession)return[3,0];e.label=3;case 3:return[2,!0]}}))}))}function f(){return u(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return[4,s()];case 1:e.sent(),e.label=2;case 2:return console.log("Waiting for OriClientSession to Connect..."),[4,a(500)];case 3:e.sent(),e.label=4;case 4:if(0==globalThis.CurrentOriSession.CheckConnection)return[3,2];e.label=5;case 5:return[2,!0]}}))}))}var p=function(e){function n(t){var r=e.call(this,t.message)||this;return r.name="InvalidPropertyException",r.exceptionInfo=t,r.message=r.exceptionInfo.message,console.error(t.message),Object.setPrototypeOf(r,n.prototype),r}return l(n,e),n}(Error),d=function(){function e(){var e=new Error;if(e&&e.stack){var n=e.stack.split("\n")[2],t=n.slice(n.lastIndexOf("/"),n.lastIndexOf(")"));0==t.length&&(t=n.slice(n.lastIndexOf("("),n.lastIndexOf(")")));var r=t.slice(1,t.indexOf(":")),o=t.slice(t.indexOf(":")+1,t.lastIndexOf(":")),i=t.slice(t.lastIndexOf(":")+1);this.fileName=r,this.lineNumber=Number(o),this.columnNumber=Number(i)}}return e.prototype.toString=function(){return this.fileName+" "+this.lineNumber+" "+this.columnNumber},e}();function b(e){var n=function(n,t){for(var r=e,o=n.split("."),i=o.length,l=0;l<i-1;l++){var u=o[l];r[u]||(r[u]={}),r=r[u]}r[o[i-1]]=t},t=function(e,r){for(var o in void 0===r&&(r=null),e)e.hasOwnProperty(o)&&("object"==typeof e[o]?(r=null===r?o:r+"."+o,t(e[o],r)):"__internalId"===o&&"string"==typeof e[o]&&null!==r&&n(r,(i=e[o],l=void 0,l="["+function(e){return"_bl_"+e}(i)+"]",document.querySelector(l))));var i,l};return t(e),e}var h=function(e,n,t,r){return new(t||(t=Promise))((function(o,i){function l(e){try{c(r.next(e))}catch(e){i(e)}}function u(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(l,u)}c((r=r.apply(e,n||[])).next())}))},y=function(e,n){var t,r,o,i,l={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;l;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return l.label++,{value:i[1],done:!1};case 5:l.label++,r=i[1],i=[0];continue;case 7:i=l.ops.pop(),l.trys.pop();continue;default:if(!(o=(o=l.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){l=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){l.label=i[1];break}if(6===i[0]&&l.label<o[1]){l.label=o[1],o=i;break}if(o&&l.label<o[2]){l.label=o[2],l.ops.push(i);break}o[2]&&l.ops.pop(),l.trys.pop();continue}i=n.call(e,l)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},v=function(){function e(){}return e.prototype.ReloadBrowser=function(){console.log("Webpack change, reloading..."),location.reload()},e.prototype.InjectIntoJSSession=function(e){return h(this,void 0,void 0,(function(){var n;return y(this,(function(t){switch(t.label){case 0:return console.log("DotNetInterop Inject called from server"),console.log(e),[4,r.WaitForSession()];case 1:return t.sent(),null!=globalThis.CurrentOriSession?((n=globalThis.CurrentOriSession.InjectDotNetInterop(e))||console.error(),[2,Promise.resolve(n)]):(console.error(),[2,Promise.resolve(!1)])}}))}))},e.prototype.RecieveComponent=function(e){console.log("recieved list of components"),console.log(e),globalThis.WorkingThroughJSParam=e},e}();globalThis.OriJSClientCalls=new v,Object.freeze(globalThis.OriJSClientCalls);var g=function(){function e(){}return Object.defineProperty(e.prototype,"CheckConnection",{get:function(){return null!=this._dotNetInterop},enumerable:!0,configurable:!0}),e.prototype.InjectDotNetInterop=function(e){return null==this._dotNetInterop&&(this._dotNetInterop=e),null!=this._dotNetInterop&&(console.log("DotNetInterop Injected"),console.log(this._dotNetInterop),!0)},e.prototype.WorkingNewBuildingBlock=function(){return h(this,void 0,void 0,(function(){var e,n;return y(this,(function(t){switch(t.label){case 0:return this.CheckConnection?(n=(e=r).BlazorIDToElement,[4,this._dotNetInterop.invokeMethodAsync("BuildNewBuildingBlock")]):[3,2];case 1:return[2,n.apply(e,[t.sent()])];case 2:return[2]}}))}))},e.prototype.FailedNewBuildingBlock=function(){return h(this,void 0,void 0,(function(){return y(this,(function(e){switch(e.label){case 0:return this.CheckConnection?[4,this._dotNetInterop.invokeMethodAsync("BuildNewBuildingBlock")]:[3,2];case 1:return[2,e.sent()];case 2:return[2]}}))}))},e}(),w=function(e,n,t,r){return new(t||(t=Promise))((function(o,i){function l(e){try{c(r.next(e))}catch(e){i(e)}}function u(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(l,u)}c((r=r.apply(e,n||[])).next())}))},m=function(e,n){var t,r,o,i,l={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;l;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return l.label++,{value:i[1],done:!1};case 5:l.label++,r=i[1],i=[0];continue;case 7:i=l.ops.pop(),l.trys.pop();continue;default:if(!(o=(o=l.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){l=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){l.label=i[1];break}if(6===i[0]&&l.label<o[1]){l.label=o[1],o=i;break}if(o&&l.label<o[2]){l.label=o[2],l.ops.push(i);break}o[2]&&l.ops.pop(),l.trys.pop();continue}i=n.call(e,l)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Blazor.start({}).then((function(){console.debug("Blazor has connected"),Object.defineProperty(window,"CurrentOriSession",{value:new o.OriWebClientSession,writable:!1})})),w(void 0,void 0,void 0,(function(){var e,n;return m(this,(function(t){switch(t.label){case 0:return[4,r.WaitForConnection()];case 1:return t.sent(),[4,globalThis.CurrentOriSession.WorkingNewBuildingBlock()];case 2:return e=t.sent(),[4,globalThis.CurrentOriSession.FailedNewBuildingBlock()];case 3:return n=t.sent(),globalThis.WorkingComponent=e,globalThis.FailedComponent=n,console.log("New buildingblock called"),[2]}}))}))}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,